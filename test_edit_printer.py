#!/usr/bin/python# -*- coding: UTF-8 -*-import timefrom commonlib.base_lib.mylog.mylog import logimport pytestfrom src.Common_Fun.mythred import exec_threadfrom src.TestCase.RcdcCase.WEB.printer_web.common_printer_web import *from src.TestData.RcdcData.web_erreor_msg.printer_test_data import SHARE_MOE_SQL, SHARE_MOE_SQL1class TestEditPrinter(object):    # @staticmethod    # def edit_print_common_assert(result, configDescription='默认描述', configName='配置', printerConnectType='S'):    #     """    #     编辑打印机公用断言    #     :param result:    #     :param configDescription:    #     :param configName:    #     :param printerConnectType:    #     :return:    #     """    #     printer_web_common_assert(result=result, status="SUCCESS")    #     temp_data = result['content']['itemArr']    #     if configDescription:    #         assert temp_data['configDescription'] == configDescription    #     if configName:    #         assert temp_data['configName'] == configName    #     if printerConnectType:    #         assert temp_data['printerConnectType'] == printerConnectType    #    @staticmethod    def edit_print_common_assert(result, configDescription='默认描述', configName='默认配置名', printerConnectType='S'):        """        查询打印机公用断言        :param result:        :param configDescription:        :param configName:        :param printerConnectType:        :return:        """        printer_web_common_assert(result=result, status="SUCCESS")        temp_data = result['content']        if configDescription:            assert temp_data['configDescription'] == configDescription        if configName:            assert temp_data['configName'] == configName        if printerConnectType:            assert temp_data['printerConnectType'] == printerConnectType    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['S', ], indirect=True)    def test_edit_printer_01(self, open_printer_testdata3):        """        用例名称:仅修改共享打印机（SHARE）名称，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:仅修改共享打印机（SHARE）名称，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configname='修改后配置名', id=open_printer_testdata3)        printer_web_common_assert(result=result1, message="操作成功", status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata3)        # printer_web_common_assert(result=result, status="SUCCESS")        #self.edit_print_common_assert(result, printerConnectType='S', configName='修改后配置名')        self.edit_print_common_assert(result, printerConnectType='S', configName='修改后配置名')        # for item in result['content']['itemArr']:        #     assert item['configName'] == '修改后配置名'        #     assert item['printerConnectType'] == 'SHARE'    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['N', ], indirect=True)    def test_edit_printer_02(self, open_printer_testdata3):        """        用例名称:仅修改网络打印机（NETWORK）名称，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:仅修改网络打印机（NETWORK）名称，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configname='修改后配置名', id=open_printer_testdata3)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata3)        self.edit_print_common_assert(result, printerConnectType='N', configName='修改后配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['M', ], indirect=True)    def test_edit_printer_03(self, open_printer_testdata3):        """        用例名称:仅修改本地打印机-共享（LOCAL_SHARE）名称，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:仅修改本地打印机-共享（LOCAL_SHARE）名称，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configname='修改后配置名', id=open_printer_testdata3)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata3)        self.edit_print_common_assert(result, printerConnectType='M', configName='修改后配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['L', ], indirect=True)    def test_edit_printer_04(self, open_printer_testdata3):        """        用例名称:仅修改本地打印机-不共享（LOCAL_UNSHARE）名称，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:仅修改本地打印机-不共享（LOCAL_UNSHARE）名称，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configname='修改后配置名', id=open_printer_testdata3)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata3)        self.edit_print_common_assert(result, printerConnectType='L', configName='修改后配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_edit_printer_05(self, open_printer_testdata1):        """        用例名称:仅修改共享打印机（SHARE）描述，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:仅修改共享打印机（SHARE）描述，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configdescription='修改后描述', id=open_printer_testdata1)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata1)        self.edit_print_common_assert(result, printerConnectType='S', configDescription='修改后描述')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['N', ], indirect=True)    def test_edit_printer_06(self, open_printer_testdata1):        """        用例名称:仅修改网络打印机（NETWORK）描述，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:仅修改网络打印机（NETWORK）描述，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configdescription='修改后描述', id=open_printer_testdata1)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata1)        self.edit_print_common_assert(result, printerConnectType='N', configDescription='修改后描述')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['M', ], indirect=True)    def test_edit_printer_07(self, open_printer_testdata1):        """        用例名称:仅修改本地打印机-共享（LOCAL_SHARE）描述，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:仅修改本地打印机-共享（LOCAL_SHARE）描述，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configdescription='修改后描述', id=open_printer_testdata1)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata1)        self.edit_print_common_assert(result, printerConnectType='M', configDescription='修改后描述')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['L', ], indirect=True)    def test_edit_printer_08(self, open_printer_testdata1):        """        用例名称:仅修改本地打印机-不共享（LOCAL_UNSHARE）描述，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:仅修改本地打印机-不共享（LOCAL_UNSHARE）描述，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configdescription='修改后描述', id=open_printer_testdata1)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata1)        self.edit_print_common_assert(result, printerConnectType='L', configDescription='修改后描述')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['S', ], indirect=True)    def test_edit_printer_09(self, open_printer_testdata3):        """        用例名称:同时修改共享打印机（SHARE）描述和名称，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:同时修改共享打印机（SHARE）描述和名称，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configdescription='修改后描述', configname='修改后配置名',                                      id=open_printer_testdata3)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata3)        self.edit_print_common_assert(result, printerConnectType='S', configDescription='修改后描述', configName='修改后配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['N', ], indirect=True)    def test_edit_printer_010(self, open_printer_testdata3):        """        用例名称:同时修改网络打印机（NETWORK）描述和名称，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:同时修改网络打印机（NETWORK）描述和名称，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configdescription='修改后描述', configname='修改后配置名',                                      id=open_printer_testdata3)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata3)        self.edit_print_common_assert(result, printerConnectType='N', configDescription='修改后描述', configName='修改后配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['M', ], indirect=True)    def test_edit_printer_011(self, open_printer_testdata3):        """        用例名称:同时修改本地打印机-共享（LOCAL_SHARE）描述和名称，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:同时修改本地打印机-共享（LOCAL_SHARE）描述和名称，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configdescription='修改后描述', configname='修改后配置名',                                      id=open_printer_testdata3)        printer_web_common_assert(result=result1, message="操作成功", status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata3)        self.edit_print_common_assert(result, printerConnectType='M', configDescription='修改后描述', configName='修改后配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['L', ], indirect=True)    def test_edit_printer_012(self, open_printer_testdata3):        """        用例名称:同时修改本地打印机-不共享（LOCAL_UNSHARE）描述和名称，查询详情信息有变更        接口名称:编辑打印机配置        用例作者:        测试点:同时修改本地打印机-不共享（LOCAL_UNSHARE）描述和名称，查询详情信息有变更        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configdescription='修改后描述', configname='修改后配置名',                                      id=open_printer_testdata3)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata3)        self.edit_print_common_assert(result, printerConnectType='L', configDescription='修改后描述', configName='修改后配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata4', ['S', ], indirect=True)    def test_edit_printer_013(self, open_printer_testdata4):        """        用例名称:共享打印机（SHARE）名称反复变更，查询详情信息有相应的变更        接口名称:编辑打印机配置        用例作者:        测试点:共享打印机（SHARE）名称反复变更，查询详情信息有相应的变更        前置步骤:        执行步骤:        校验点:        """        for i in range(11):            result1 = common_edit_printer(configname='修改后配置名{}'.format(i), id=open_printer_testdata4)            printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata4)        self.edit_print_common_assert(result, printerConnectType='S', configName='修改后配置名10')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata4', ['N', ], indirect=True)    def test_edit_printer_014(self, open_printer_testdata4):        """        用例名称:网络打印机（NETWORK）名称反复变更，查询详情信息有相应的变更        接口名称:编辑打印机配置        用例作者:        测试点:网络打印机（NETWORK）名称反复变更，查询详情信息有相应的变更        前置步骤:        执行步骤:        校验点:        """        for i in range(11):            result1 = common_edit_printer(configname='修改后配置名{}'.format(i), id=open_printer_testdata4)            printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata4)        self.edit_print_common_assert(result, printerConnectType='N', configName='修改后配置名10')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata4', ['M', ], indirect=True)    def test_edit_printer_015(self, open_printer_testdata4):        """        用例名称:本地打印机-共享（LOCAL_SHARE）名称反复变更，查询详情信息有相应的变更        接口名称:编辑打印机配置        用例作者:        测试点:本地打印机-共享（LOCAL_SHARE）名称反复变更，查询详情信息有相应的变更        前置步骤:        执行步骤:        校验点:        """        for i in range(11):            result1 = common_edit_printer(configname='修改后配置名{}'.format(i), id=open_printer_testdata4)            printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata4)        self.edit_print_common_assert(result, printerConnectType='M', configName='修改后配置名10')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata4', ['L', ], indirect=True)    def test_edit_printer_016(self, open_printer_testdata4):        """        用例名称:本地打印机-不共享（LOCAL_UNSHARE）名称反复变更，查询详情信息有相应的变更        接口名称:编辑打印机配置        用例作者:        测试点:本地打印机-不共享（LOCAL_UNSHARE）名称反复变更，查询详情信息有相应的变更        前置步骤:        执行步骤:        校验点:        """        for i in range(11):            result1 = common_edit_printer(configname='修改后配置名{}'.format(i), id=open_printer_testdata4)            printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata4)        self.edit_print_common_assert(result, printerConnectType='L', configName='修改后配置名10')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_edit_printer_017(self, open_printer_testdata1):        """        用例名称:共享打印机（SHARE）描述反复变更，查询详情信息有相应的变更        接口名称:编辑打印机配置        用例作者:        测试点:共享打印机（SHARE）描述反复变更，查询详情信息有相应的变更        前置步骤:        执行步骤:        校验点:        """        for i in range(11):            result1 = common_edit_printer(configdescription='修改后描述{}'.format(i),                                          id=open_printer_testdata1)            printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata1)        self.edit_print_common_assert(result, printerConnectType='S', configDescription='修改后描述10')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['N', ], indirect=True)    def test_edit_printer_018(self, open_printer_testdata1):        """        用例名称:网络打印机（NETWORK）描述反复变更，查询详情信息有相应的变更        接口名称:编辑打印机配置        用例作者:        测试点:网络打印机（NETWORK）描述反复变更，查询详情信息有相应的变更        前置步骤:        执行步骤:        校验点:        """        for i in range(11):            result1 = common_edit_printer(configdescription='修改后描述{}'.format(i),                                          id=open_printer_testdata1)            printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata1)        self.edit_print_common_assert(result, printerConnectType='N', configDescription='修改后描述10')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['M', ], indirect=True)    def test_edit_printer_019(self, open_printer_testdata1):        """        用例名称:本地打印机-共享（LOCAL_SHARE）描述反复变更，查询详情信息有相应的变更        接口名称:编辑打印机配置        用例作者:        测试点:本地打印机-共享（LOCAL_SHARE）描述反复变更，查询详情信息有相应的变更        前置步骤:        执行步骤:        校验点:        """        for i in range(11):            result1 = common_edit_printer(configdescription='修改后描述{}'.format(i),                                          id=open_printer_testdata1)            printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata1)        self.edit_print_common_assert(result, printerConnectType='M', configDescription='修改后描述10')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['L', ], indirect=True)    def test_edit_printer_020(self, open_printer_testdata1):        """        用例名称:本地打印机-不共享（LOCAL_UNSHARE）描述反复变更，查询详情信息有相应的变更        接口名称:编辑打印机配置        用例作者:        测试点:本地打印机-不共享（LOCAL_UNSHARE）描述反复变更，查询详情信息有相应的变更        前置步骤:        执行步骤:        校验点:        """        for i in range(11):            result1 = common_edit_printer(configdescription='修改后描述{}'.format(i),                                          id=open_printer_testdata1)            printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata1)        self.edit_print_common_assert(result, printerConnectType='L', configDescription='修改后描述10')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['S', ], indirect=True)    def test_edit_printer_021(self, open_printer_testdata5):        """        用例名称:变更共享打印机（SHARE）名称为已经存在的打印机名称，变更失败        接口名称:编辑打印机配置        用例作者:        测试点:变更共享打印机（SHARE）名称为已经存在的打印机名称，变更失败        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configname='默认配置名1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message='配置名称已存在，请更换名称', status="ERROR", msgKey='rcdc_rco_printer_config_already_exist')        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='S', configName='默认配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['N', ], indirect=True)    def test_edit_printer_022(self, open_printer_testdata5):        """        用例名称:变更网络打印机（NETWORK）名称为已经存在的打印机名称，变更失败        接口名称:编辑打印机配置        用例作者:        测试点:变更网络打印机（NETWORK）名称为已经存在的打印机名称，变更失败        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configname='默认配置名1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message='配置名称已存在，请更换名称', status="ERROR", msgKey='rcdc_rco_printer_config_already_exist')        result = common_detail_printer(id=open_printer_testdata5)        print(result)        self.edit_print_common_assert(result, printerConnectType='N', configName='默认配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['M', ], indirect=True)    def test_edit_printer_023(self, open_printer_testdata5):        """        用例名称:变更本地打印机-共享（LOCAL_SHARE）名称为已经存在的打印机名称，变更失败        接口名称:编辑打印机配置        用例作者:        测试点:变更本地打印机-共享（LOCAL_SHARE）名称为已经存在的打印机名称，变更失败        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configname='默认配置名1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message='配置名称已存在，请更换名称', status="ERROR", msgKey='rcdc_rco_printer_config_already_exist')        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='M', configName='默认配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['L', ], indirect=True)    def test_edit_printer_024(self, open_printer_testdata5):        """        用例名称:变更本地打印机-不共享（LOCAL_UNSHARE）名称为已经存在的打印机名称，变更失败        接口名称:编辑打印机配置        用例作者:        测试点:变更本地打印机-不共享（LOCAL_UNSHARE）名称为已经存在的打印机名称，变更失败        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configname='默认配置名1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message='配置名称已存在，请更换名称', status="ERROR", msgKey='rcdc_rco_printer_config_already_exist')        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='L', configName='默认配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['S', ], indirect=True)    def test_edit_printer_025(self, open_printer_testdata5):        """        用例名称:变更共享打印机（SHARE）描述为已经存在的打印机描述，变更成功        接口名称:编辑打印机配置        用例作者:        测试点:变更共享打印机（SHARE）描述为已经存在的打印机描述，变更成功        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configdescription='默认描述1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='S', configDescription='默认描述1')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['N', ], indirect=True)    def test_edit_printer_026(self, open_printer_testdata5):        """        用例名称:变更网络打印机（NETWORK）描述为已经存在的打印机描述，变更成功        接口名称:编辑打印机配置        用例作者:        测试点:变更网络打印机（NETWORK）描述为已经存在的打印机描述，变更成功        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configdescription='默认描述1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='N', configDescription='默认描述1')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['M', ], indirect=True)    def test_edit_printer_027(self, open_printer_testdata5):        """        用例名称:变更本地打印机-共享（LOCAL_SHARE）描述为已经存在的打印机描述，变更成功        接口名称:编辑打印机配置        用例作者:        测试点:变更本地打印机-共享（LOCAL_SHARE）描述为已经存在的打印机描述，变更成功        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configdescription='默认描述1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='M', configDescription='默认描述1')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['L', ], indirect=True)    def test_edit_printer_028(self, open_printer_testdata5):        """        用例名称:变更本地打印机-不共享（LOCAL_UNSHARE）描述为已经存在的打印机描述，变更成功        接口名称:编辑打印机配置        用例作者:        测试点:变更本地打印机-不共享（LOCAL_UNSHARE）描述为已经存在的打印机描述，变更成功        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configdescription='默认描述1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='L', configDescription='默认描述1')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['S', ], indirect=True)    def test_edit_printer_029(self, open_printer_testdata5):        """        用例名称:同时变更共享打印机（SHARE）名称为已经存在的打印机名称，变更打印机描述为已存在的打印机描述，变更失败        接口名称:编辑打印机配置        用例作者:        测试点:同时变更共享打印机（SHARE）名称为已经存在的打印机名称，变更打印机描述为已存在的打印机描述，变更失败        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configname='默认配置名1', configdescription='默认描述1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message="配置名称已存在，请更换名称", status="ERROR")        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='S', configDescription='默认描述', configName='默认配置名',)    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['N', ], indirect=True)    def test_edit_printer_030(self, open_printer_testdata5):        """        用例名称:同时变更网络打印机（NETWORK）名称为已经存在的打印机名称，变更打印机描述为已存在的打印机描述，变更失败        接口名称:编辑打印机配置        用例作者:        测试点:同时变更网络打印机（NETWORK）名称为已经存在的打印机名称，变更打印机描述为已存在的打印机描述，变更失败        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configname='默认配置名1', configdescription='默认描述1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message="配置名称已存在，请更换名称", status="ERROR")        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='N', configDescription='默认描述', configName='默认配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['M', ], indirect=True)    def test_edit_printer_031(self, open_printer_testdata5):        """        用例名称:同时变更本地打印机-共享（LOCAL_SHARE）名称为已经存在的打印机名称，变更打印机描述为已存在的打印机描述，变更失败        接口名称:编辑打印机配置        用例作者:        测试点:同时变更本地打印机-共享（LOCAL_SHARE）名称为已经存在的打印机名称，变更打印机描述为已存在的打印机描述，变更失败        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configname='默认配置名1', configdescription='默认描述1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message="配置名称已存在，请更换名称", status="ERROR")        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='M', configDescription='默认描述', configName='默认配置名')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata5', ['L', ], indirect=True)    def test_edit_printer_032(self, open_printer_testdata5):        """        用例名称:同时变更本地打印机-不共享（LOCAL_UNSHARE）名称为已经存在的打印机名称，变更打印机描述为已存在的打印机描述，变更失败        接口名称:编辑打印机配置        用例作者:        测试点:同时变更本地打印机-不共享（LOCAL_UNSHARE）名称为已经存在的打印机名称，变更打印机描述为已存在的打印机描述，变更失败        前置步骤:        执行步骤:        校验点:        """        add_printer(printer_info=SHARE_MOE_SQL1)        result1 = common_edit_printer(configname='默认配置名1', configdescription='默认描述1', id=open_printer_testdata5)        printer_web_common_assert(result=result1, message="配置名称已存在，请更换名称", status="ERROR")        result = common_detail_printer(id=open_printer_testdata5)        self.edit_print_common_assert(result, printerConnectType='L', configDescription='默认描述', configName='默认配置名')    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_edit_printer_033(self):    #     """    #     用例名称:打印机配置关闭的情况下，编辑单个共享打印机（SHARE）配置，编辑失败    #     接口名称:编辑打印机配置    #     用例作者:    #     测试点:打印机配置关闭的情况下，编辑单个共享打印机（SHARE）配置，编辑失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_edit_printer()    #     printer_web_common_assert(result=result)    #     是否开启对接口没有影响，不覆盖    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_edit_printer_034(self):    #     """    #     用例名称:打印机配置关闭的情况下，编辑单个网络打印机（NETWORK）配置，编辑失败    #     接口名称:编辑打印机配置    #     用例作者:    #     测试点:打印机配置关闭的情况下，编辑单个网络打印机（NETWORK）配置，编辑失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_edit_printer()    #     printer_web_common_assert(result=result)    #     是否开启对接口没有影响，不覆盖    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_edit_printer_035(self):    #     """    #     用例名称:打印机配置关闭的情况下，编辑单个本地打印机-共享（LOCAL_SHARE）配置，编辑失败    #     接口名称:编辑打印机配置    #     用例作者:    #     测试点:打印机配置关闭的情况下，编辑单个本地打印机-共享（LOCAL_SHARE）配置，编辑失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_edit_printer()    #     printer_web_common_assert(result=result)    #     是否开启对接口没有影响，不覆盖    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_edit_printer_036(self):    #     """    #     用例名称:打印机配置关闭的情况下，编辑单个本地打印机-不共享（LOCAL_UNSHARE）配置，编辑失败    #     接口名称:编辑打印机配置    #     用例作者:    #     测试点:打印机配置关闭的情况下，编辑单个本地打印机-不共享（LOCAL_UNSHARE）配置，编辑失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_edit_printer()    #     printer_web_common_assert(result=result)    #     是否开启对接口没有影响，不覆盖    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_edit_printer_037(self):    #     """    #     用例名称:编辑不存在的共享打印机（SHARE）配置，编辑失败，查询详情失败    #     接口名称:编辑打印机配置    #     用例作者:    #     测试点:编辑不存在的共享打印机（SHARE）配置，编辑失败，查询详情失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_edit_printer()    #     printer_web_common_assert(result=result)    #     覆盖一种类型即可，test_edit_printer_038已经覆盖    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    def test_edit_printer_038(self):        """        用例名称:编辑不存在的网络打印机（NETWORK）配置，编辑失败，查询详情失败        接口名称:编辑打印机配置        用例作者:        测试点:编辑不存在的网络打印机（NETWORK）配置，编辑失败，查询详情失败        前置步骤:        执行步骤:        校验点:        """        common_open_printer(status='true')        result = common_edit_printer(configname='不存在', configdescription='不存在',                                     id='8c122bcb-bba8-4638-9cc7-854496d80d03')        printer_web_common_assert(result=result, message="打印机配置不存在", status="ERROR")    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_edit_printer_039(self):    #     """    #     用例名称:编辑不存在的本地打印机-共享（LOCAL_SHARE）配置，编辑失败，查询详情失败    #     接口名称:编辑打印机配置    #     用例作者:    #     测试点:编辑不存在的本地打印机-共享（LOCAL_SHARE）配置，编辑失败，查询详情失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_edit_printer()    #     printer_web_common_assert(result=result)    #     覆盖一种类型即可，test_edit_printer_038已经覆盖    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_edit_printer_040(self):    #     """    #     用例名称:编辑不存在的本地打印机-不共享（LOCAL_UNSHARE）配置，编辑失败，查询详情失败    #     接口名称:编辑打印机配置    #     用例作者:    #     测试点:编辑不存在的本地打印机-不共享（LOCAL_UNSHARE）配置，编辑失败，查询详情失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_edit_printer()    #     printer_web_common_assert(result=result)    #    #     覆盖一种类型即可，test_edit_printer_038已经覆盖    #    # @pytest.mark.unpublish    # @pytest.mark.case_level_1    # @pytest.mark.case_type_scene    # def test_edit_printer_041(self):    #     """    #     用例名称:接口访问是否经过身份认证（即cookie或者证书的认证）    #     接口名称:编辑打印机配置    #     用例作者:    #     测试点:接口访问是否经过身份认证（即cookie或者证书的认证）    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_edit_printer()    #     printer_web_common_assert(result=result)    # @pytest.mark.unpublish    # @pytest.mark.case_level_1    # @pytest.mark.case_type_scene    # def test_edit_printer_042(self):    #     """    #     用例名称:admin用户接口访问成功    #     接口名称:编辑打印机配置    #     用例作者:    #     测试点:admin用户接口访问成功    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_edit_printer()    #     printer_web_common_assert(result=result)    #     接口未实现分级分权，无需覆盖    @pytest.mark.publish    @pytest.mark.case_level_2    @pytest.mark.case_type_performance    @pytest.mark.parametrize('open_printer_testdata3', ['S', ], indirect=True)    def test_edit_printer_043(self, open_printer_testdata3):        """        用例名称:接口响应时间不超过3秒        接口名称:编辑打印机配置        用例作者:        测试点:接口响应时间不超过3秒        前置步骤:        执行步骤:        校验点:        """        result1 = common_edit_printer(configname='修改后配置名', id=open_printer_testdata3)        t1 = time.time()        printer_web_common_assert(result=result1, message=None, status="SUCCESS")        t2 = time.time()        assert t2 - t1 < 3 ,'返回时间超过3秒'    @pytest.mark.unpublish    @pytest.mark.case_level_2    @pytest.mark.case_type_performance    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_edit_printer_044(self, open_printer_testdata1):        """        用例名称:并发执行200次        接口名称:编辑打印机配置        用例作者:        测试点:并发执行200次        前置步骤:        执行步骤:        校验点:        # """        data_list = []        for i in range(200):            data_list.append(['默认配置名', '默认描述', open_printer_testdata1])        print(data_list)        result_list = exec_thread(common_edit_printer, data_list)        for result in result_list:            printer_web_common_assert(result=result, status="SUCCESS")            result1 = common_detail_printer(id=open_printer_testdata1)            self.edit_print_common_assert(result1, printerConnectType='S', configDescription='默认描述')