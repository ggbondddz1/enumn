#!/usr/bin/python# -*- coding: UTF-8 -*-import timefrom commonlib.base_lib.mylog.mylog import logimport pytestfrom src.Common_Fun.mythred import exec_threadfrom src.TestCase.RcdcCase.WEB.printer_web.common_printer_web import *class TestDetailPrinter(object):    @staticmethod    def detail_print_common_assert(result, configDescription='默认描述', configName='默认配置名', printerConnectType='S',                                   printerModel='sdf', createTime=None, configSupportOS='windows'):        """        查询打印机公用断言        :param result:        :param configDescription:        :param configName:        :param printerConnectType:        :return:        """        printer_web_common_assert(result=result, status="SUCCESS")        temp_data = result['content']        if configDescription:            assert temp_data['configDescription'] == configDescription        if configName:            assert temp_data['configName'] == configName        if printerConnectType:            assert temp_data['printerConnectType'] == printerConnectType        if printerModel:            assert temp_data['printerModel'] == printerModel        if createTime:            assert temp_data['createTime'] == createTime        if configSupportOS:            assert temp_data['configSupportOs'] == configSupportOS    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_detail_printer_01(self):    #     """    #     用例名称:查询已经存在的信息，正常返回（已覆盖）    #     接口名称:查询打印机配置详情    #     用例作者:    #     测试点:查询已经存在的信息，正常返回（已覆盖）    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_detail_printer()    #     printer_web_common_assert(result=result)    #    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_detail_printer_02(self):    #     """    #     用例名称:查询不存在的信息，查询失败（已覆盖）    #     接口名称:查询打印机配置详情    #     用例作者:    #     测试点:查询不存在的信息，查询失败（已覆盖）    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_detail_printer()    #     printer_web_common_assert(result=result)    #    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_detail_printer_03(self):    #     """    #     用例名称:查询被删除的信息，查询失败（已覆盖）    #     接口名称:查询打印机配置详情    #     用例作者:    #     测试点:查询被删除的信息，查询失败（已覆盖）    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_detail_printer()    #     printer_web_common_assert(result=result)    #    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_detail_printer_04(self):    #     """    #     用例名称:修改信息后查询，返回的查询信息是修改后的信息（已覆盖）    #     接口名称:查询打印机配置详情    #     用例作者:    #     测试点:修改信息后查询，返回的查询信息是修改后的信息（已覆盖）    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_detail_printer()    #     printer_web_common_assert(result=result)    #    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_detail_printer_05(self):    #     """    #     用例名称:删除多条数据，列表减少相应的信息（已覆盖）    #     接口名称:查询打印机配置详情    #     用例作者:    #     测试点:删除多条数据，列表减少相应的信息（已覆盖）    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_detail_printer()    #     printer_web_common_assert(result=result)    #    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_detail_printer_06(self):    #     """    #     用例名称:打印机配置关闭的情况下，查询打印机详情，查询失败    #     接口名称:查询打印机配置详情    #     用例作者:    #     测试点:打印机配置关闭的情况下，查询打印机详情，查询失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_detail_printer()    #     printer_web_common_assert(result=result)    #     打印机配置状态与接口调用无关，无需覆盖    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_detail_printer_07(self):    #     """    #     用例名称:无异常码，只返回成功和失败    #     接口名称:查询打印机配置详情    #     用例作者:    #     测试点:无异常码，只返回成功和失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_detail_printer()    #     printer_web_common_assert(result=result)    #     打印机配置状态与接口调用无关，无需覆盖    # @pytest.mark.unpublish    # @pytest.mark.case_level_1    # @pytest.mark.case_type_scene    # def test_detail_printer_08(self):    #     """    #     用例名称:接口访问是否经过身份认证（即cookie或者证书的认证）    #     接口名称:查询打印机配置详情    #     用例作者:    #     测试点:接口访问是否经过身份认证（即cookie或者证书的认证）    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_detail_printer()    #     printer_web_common_assert(result=result)    # @pytest.mark.unpublish    # @pytest.mark.case_level_1    # @pytest.mark.case_type_scene    # def test_detail_printer_09(self):    #     """    #     用例名称:admin用户接口访问成功    #     接口名称:查询打印机配置详情    #     用例作者:    #     测试点:admin用户接口访问成功    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_detail_printer()    #     printer_web_common_assert(result=result)    #     接口未做分级分权，无需覆盖    @pytest.mark.publish    @pytest.mark.case_level_2    @pytest.mark.case_type_performance    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_detail_printer_010(self, open_printer_testdata1):        """        用例名称:接口响应时间不超过3秒        接口名称:查询打印机配置详情        用例作者:        测试点:接口响应时间不超过3秒        前置步骤:        执行步骤:        校验点:        """        result = common_detail_printer(id=open_printer_testdata1)        t1 = time.time()        printer_web_common_assert(result=result, status="SUCCESS")        t2 = time.time()        assert t2 - t1 < 3, '返回时间超过3秒'        self.detail_print_common_assert(result, configDescription='默认描述', configName='默认配置名', printerConnectType='S',                                        printerModel='sdf', createTime=1601447643000, configSupportOS='windows')    @pytest.mark.publish    @pytest.mark.case_level_2    @pytest.mark.case_type_performance    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_detail_printer_011(self, open_printer_testdata1):        """        用例名称:并发执行200次        接口名称:查询打印机配置详情        用例作者:        测试点:并发执行200次        前置步骤:        执行步骤:        校验点:        """        data_list = [[open_printer_testdata1] for i in range(2)]        result_list = exec_thread(common_detail_printer, data_list)        print(11111111111111111)        print(result_list)        for result in result_list:            printer_web_common_assert(result=result, status="SUCCESS")            self.detail_print_common_assert(result, configDescription='默认描述', configName='默认配置名', printerConnectType='S',                                   printerModel='sdf', createTime=1601447643000, configSupportOS='windows')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_detail_printer_012(self, open_printer_testdata1):        """        用例名称:查询已经存在的共享打印机（SHARE）信息，正常返回        接口名称:查询打印机配置详情        用例作者:        测试点:查询已经存在的共享打印机（SHARE）信息，正常返回        前置步骤:        执行步骤:        校验点:        """        result = common_detail_printer(id=open_printer_testdata1)        printer_web_common_assert(result=result, status="SUCCESS")        self.detail_print_common_assert(result, configDescription='默认描述', configName='默认配置名', printerConnectType='S',                                        printerModel='sdf', createTime=1601447643000, configSupportOS='windows')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['N', ], indirect=True)    def test_detail_printer_013(self, open_printer_testdata1):        """        用例名称:查询已经存在的网络打印机（NETWORK）信息，正常返回        接口名称:查询打印机配置详情        用例作者:        测试点:查询已经存在的网络打印机（NETWORK）信息，正常返回        前置步骤:        执行步骤:        校验点:        """        result = common_detail_printer(id=open_printer_testdata1)        printer_web_common_assert(result=result, status="SUCCESS")        self.detail_print_common_assert(result, configDescription='默认描述', configName='默认配置名', printerConnectType='N',                                        printerModel='sdf', createTime=1601447643000, configSupportOS='windows')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['M', ], indirect=True)    def test_detail_printer_014(self, open_printer_testdata1):        """        用例名称:查询已经存在的本地打印机-共享（LOCAL_SHARE）信息，正常返回        接口名称:查询打印机配置详情        用例作者:        测试点:查询已经存在的本地打印机-共享（LOCAL_SHARE）信息，正常返回        前置步骤:        执行步骤:        校验点:        """        result = common_detail_printer(id=open_printer_testdata1)        printer_web_common_assert(result=result, status="SUCCESS")        self.detail_print_common_assert(result, configDescription='默认描述', configName='默认配置名', printerConnectType='M',                                        printerModel='sdf', createTime=1601447643000, configSupportOS='windows')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['L', ], indirect=True)    def test_detail_printer_015(self, open_printer_testdata1):        """        用例名称:查询已经存在的本地打印机-共享（LOCAL_UNSHARE）信息，正常返回        接口名称:查询打印机配置详情        用例作者:        测试点:查询已经存在的本地打印机-共享（LOCAL_UNSHARE）信息，正常返回        前置步骤:        执行步骤:        校验点:        """        result = common_detail_printer(id=open_printer_testdata1)        printer_web_common_assert(result=result, status="SUCCESS")        self.detail_print_common_assert(result, configDescription='默认描述', configName='默认配置名', printerConnectType='L',                                        printerModel='sdf', createTime=1601447643000, configSupportOS='windows')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    def test_detail_printer_016(self):        """        用例名称:查询不存在的信息，查询失败        接口名称:查询打印机配置详情        用例作者:        测试点:查询不存在的信息，查询失败        前置步骤:        执行步骤:        校验点:        """        common_open_printer(status='true')        result = common_detail_printer(id='8c122bcb-bba8-4638-9cc7-854496d80d03')        printer_web_common_assert(result=result, status="ERROR", message="打印机配置不存在",                                  msgKey='rcdc_rco_printer_config_not_exist')